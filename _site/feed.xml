<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Site Title</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2014-04-26T12:46:15+01:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Your Name</name>
  <uri>http://localhost:4000/</uri>
  <email>your@email.com</email>
</author>


<entry>
  <title type="html"><![CDATA[[Visual Studio] A humble design request...]]></title>
  <link>http://localhost:4000/visual%20studio/visual-studio-a-humble-design-request</link>
  <id>http://localhost:4000/visual%20studio/visual-studio-a-humble-design-request</id>
  <published>2014-04-14T00:00:00+01:00</published>
  <updated>2014-04-14T00:00:00+01:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Today I made my first suggestion on Visual Studio User Voice. My request is simple. I would like the Visual Studio design team to change the Browser Link icon from a clockwise arrow to something else, such as a bidirectional horizontal arrow. Here’s why.&lt;/p&gt;

&lt;p&gt;[](http://www.levibotelho.com/wp-content/uploads/2014/04/Browser-Link-Button.png)&lt;/p&gt;

&lt;p&gt;I am constantly getting these buttons mixed up, which is not helped by the fact that the browser link button is right beside the Start Debugging button. If you agree, then do feel free to &lt;a href=&quot;http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/5771039-change-the-browser-link-icon&quot;&gt;vote on Visual Studio User Voice for this issue&lt;/a&gt;.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/visual%20studio/visual-studio-a-humble-design-request&quot;&gt;[Visual Studio] A humble design request...&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on April 14, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Heartbleed - List of vulnerable sites in the Alexa 10000]]></title>
  <link>http://localhost:4000/security/heartbleed-list-of-vulnerable-sites-in-the-alexa-10000</link>
  <id>http://localhost:4000/security/heartbleed-list-of-vulnerable-sites-in-the-alexa-10000</id>
  <published>2014-04-10T00:00:00+01:00</published>
  <updated>2014-04-10T00:00:00+01:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Let’s be clear from the start. I’m not going to provide yet another explanation of what Heartbleed is. If you live in a cave and haven’t heard about it yet then check out these links for an explanation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bbc.com/news/technology-26969629&quot;&gt;The layman’s explanation.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://heartbleed.com/&quot;&gt;A technical explanation.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.troyhunt.com/2014/04/everything-you-need-to-know-about.html&quot;&gt;An in-depth explanation.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I am going to do, however, is post the list of the sites in the Alexa top 10000 that &lt;em&gt;have been&lt;/em&gt; impacted.  There are 630 sites in this list out of the original 10000, meaning that 6.3% of the original list was detected as being vulnerable.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;This list is actually just a filtered version of Mustafa Al-Bassam’s full list of both compromised and non-comprimised Alexa 10000 sites as detected on 08/04/2014. &lt;a href=&quot;https://github.com/musalbas/heartbleed-masstest/blob/master/top10000.txt&quot;&gt;That list can be found here&lt;/a&gt;. As I did not compile the original list I cannot vouch for its or this list’s accuracy. While I do have confidence in this data, it should only be used for informative purposes.&lt;/p&gt;

&lt;p&gt;I recommend following the password changing advice found in the “layman’s explanation” article above.&lt;/p&gt;

&lt;h2 id=&quot;the-list-in-order-of-popularity&quot;&gt;The list (in order of popularity)&lt;/h2&gt;

&lt;p&gt;yahoo.com
imgur.com
stackoverflow.com
kickass.to
flickr.com
sogou.com
adf.ly
outbrain.com
archive.org
addthis.com
stackexchange.com
popads.net
php.net
avito.ru
kaskus.co.id
web.de
chaturbate.com
zeobit.com
beeg.com
seznam.cz
okcupid.com
pch.com
xda-developers.com
steamcommunity.com
scoop.it
hidemyass.com
123rf.com
m-w.com
dreamstime.com
majesticseo.com
amung.us
duckduckgo.com
leo.org
eventbrite.com
wetransfer.com
sh.st
entrepreneur.com
zoho.com
yts.re
usmagazine.com
letitbit.net
fool.com
digitalpoint.com
picmonkey.com
petflow.com
squidoo.com
avazutracking.net
elegantthemes.com
500px.com
wpmudev.org
junbi-tracker.com
gogetlinks.net
freelotto.com
cheezburger.com
weather.gov
zergnet.com
city-data.com
mail.com
bab.la
internettrafficformula.com
startimes.com
homeshop18.com
rollingstone.com
smi2.ru
gogvo.com
indiegogo.com
livetv.sx
infowars.com
zap2it.com
breitbart.com
fatwallet.com
internetdownloadmanager.com
yjc.ir
chess.com
doodle.com
sendspace.com
similarweb.com
inc.com
bomnegocio.com
studiopress.com
privatbank.ua
juicyads.com
theatlantic.com
chefkoch.de
mirtesen.ru
clickey.com
letras.mus.br
tusfiles.net
reverbnation.com
digitaltrends.com
searchenginejournal.com
torcache.net
yify-torrents.com
championat.com
arstechnica.com
sme.sk
zomato.com
economist.com
slimspots.com
jasmin.com
lonelyplanet.com
unity3d.com
androidcentral.com
wanggou.com
tubegalore.com
gi-akademie.com
rarbg.com
prezentacya.ru
watchtower.com
xxxbunker.com
kaspersky.com
adxcore.com
depositfiles.com
xtool.ru
rantlifestyle.com
xml-sitemaps.com
banglanews24.com
worldoftanks.ru
webpagetest.org
rapidshare.com
funnie.st
vipzona.info
bizrate.com
creativecommons.org
izlesene.com
therichest.com
dailycaller.com
newsnow.co.uk
webutations.org
srclick.ru
tokopedia.com
minus.com
cyberciti.biz
tune.pk
filmaffinity.com
skrill.com
paipai.com
oschina.net
fitbit.com
myanimelist.net
bidorbuy.co.za
rantsports.com
wikispaces.com
worldoftanks.eu
cdn4711.net
hotukdeals.com
zovi.com
dfiles.ru
zone-telechargement.com
drugs.com
mediatemple.net
xmarks.com
rozetka.com.ua
appannie.com
thestreet.com
arvixe.com
transfermarkt.de
worldoftanks.com
affiliatewindow.com
bigpoint.com
zdf.de
profitcentr.com
mydealz.de
ssisurveys.com
toshiba.com
indowebster.com
dsdomination.com
utorrent.com
nosub.tv
filelist.ro
gazzetta.gr
medium.com
imperiaonline.org
vic.gov.au
creditkarma.com
online-convert.com
myegy.to
searchfunmoods.com
fark.com
scamadviser.com
bizdec.ru
bannersbroker.com
joomlart.com
webinarjam.net
pornyaz.com
unetenet.com
joyreactor.cc
globallshare.com
tuniu.com
csfd.cz
uservoice.com
trafficfactory.biz
barclaycardus.com
mci.ir
noulinx.com
ingbank.pl
gonzoxxxmovies.com
cabelas.com
khamsat.com
2gis.ru
fab.com
digitalmarketer.com
billionuploads.com
efukt.com
shaparak.ir
radiojavan.com
christianpost.com
pons.com
ymlp.com
btcclicks.com
mythemeshop.com
seo-fast.ru
mojo-themes.com
draugiem.lv
final.ir
madmimi.com
sinaapp.com
ptcsolution.com
bytes.com
attracta.com
dek-d.com
dfiles.eu
graphicstock.com
europe1.fr
fineartamerica.com
text.ru
dastelefonbuch.de
enter.ru
awempire.com
docnhat.net
megaindex.ru
ucla.edu
wisegeek.com
flightaware.com
peerfly.com
wistia.com
extremetracking.com
ghatreh.com
depositfiles.org
palcomp3.com
uiuc.edu
fancy.com
tagesanzeiger.ch
dynadot.com
soup.io
ip138.com
jumia.com.ng
worthofweb.com
adage.com
talktalk.co.uk
playcast.ru
congratulations-you-won.com
ge.tt
informador.com.mx
hammihan.com
onedio.com
olx.co.th
gi-backoffice.com
gorillavid.in
talkingpointsmemo.com
518.com.tw
fast-torrent.ru
animoto.com
webinarjam.com
arioo.com
gogoanime.com
mojomarketplace.com
nanapi.jp
bahseazad.ir
serpbook.com
libsyn.com
playxn.com
classifiedads.com
myus.com
q.gs
lijit.com
joxi.ru
vbox7.com
ocj.com.cn
giga.de
tomoson.com
alkislarlayasiyorum.com
overclock.net
domainnamesales.com
appthemes.com
katestube.com
lupoporno.com
windguru.cz
designmodo.com
berlin.de
lifo.gr
diepresse.com
postjoint.com
bittorrent.com
worldoftanks.asia
okitspace.com
sparkasse.at
nascar.com
slate.fr
njuskalo.hr
astro.com
lavozdegalicia.es
androidpolice.com
longtailvideo.com
webbirga.net
idwebgame.com
gfan.com
webempresa.com
bibsonomy.org
wenyard.com
readwrite.com
vmoptions.com
wowkeren.com
ay.gy
ibtimes.co.in
ss.lv
coinmill.com
memecenter.com
dhnet.be
ifttt.com
songmeanings.com
kicktipp.de
graphixshare.com
jango.com
zoomit.ir
userscripts.org
uyan.cc
down1oads.com
full-stream.net
1001freefonts.com
hotnews.ro
mightydeals.com
zimbra.free.fr
apktops.ir
selfhtml.org
shopzilla.com
dha.com.tr
copy.com
coderanch.com
darty.com
24tv.ua
smashwords.com
castorama.fr
solidtrustpay.com
yatedo.com
neurs.com
mdir.ir
thewire.com
futbol24.com
keek.com
elitetorrent.net
ecosia.org
j.gs
jonloomer.com
deseretnews.com
spinding.com
theme123.net
biography.com
check24.de
cplusplus.com
safecart.com
healthkart.com
baskino.com
cifraclub.com.br
exactseek.com
expatriates.com
saharareporters.com
feebbo.com
adshostnet.com
webartex.ru
pond5.com
wpml.org
dl-protect.com
seocentro.com
flexmls.com
a2hosting.com
gov.cl
savenkeep.com
internetlifestylenetwork.com
uploadbaz.com
optimizepress.com
mttbsystem.com
pulptastic.com
theme.co
swansonvitamins.com
afterbuy.de
zorpia.com
1c-bitrix.ru
holidaylettings.co.uk
premiere.fr
socialadr.com
sixrevisions.com
hypovereinsbank.de
themefuse.com
roodo.com
cbr.ru
marunadanmalayali.com
jquery4u.com
powtoon.com
ubersuggest.org
markethealth.com
freelogoservices.com
readthedocs.org
mandrillapp.com
pixeden.com
nukistream.com
tractionize.com
avito.ma
101domain.com
sinemalar.com
weathernews.jp
nasgo.net
luxup.ru
wasanga.com
realself.com
matadornetwork.com
ee.co.uk
lovoo.net
paperblog.com
technobuffalo.com
zoom.com.br
bimlatino.com
dramafever.com
xojane.com
azhibo.com
edgecastcdn.net
duke.edu
mobilelikez.com
cooperativa.cl
asiatech.ir
phpnuke.org
avsforum.com
99wed.com
wine-searcher.com
cyberchimps.com
umd.edu
t24.com.tr
imgsrc.ru
farnell.com
phpbb.com
fermasosedi.ru
smartinsights.com
pik.ba
qq163.com
pciconcursos.com.br
hsoub.com
sixfigurefunnelformula.com
kingworldnews.com
heritage.org
quidco.com
mediapost.com
watchcric.com
vodafone.co.uk
viki.com
bplans.com
all-union.com
clickprime8.com
competitor.com
beliefnet.com
pingler.com
worthytoshare.com
millenium.org
encuentra24.com
skimlinks.com
mubasher.info
marksdailyapple.com
buenosaires.gob.ar
gelbeseiten.de
lalibre.be
mobikwik.com
affilorama.com
appcelerator.com
invisionpower.com
tz4.com
favstar.fm
zenhabits.net
customink.com
templateism.com
getsatisfaction.com
rosnet.ru
digitalriver.com
joomlashine.com
fide.com
lyricsmode.com
trovit.it
socialfabric.us
rcgroups.com
directadmin.com
hrsmart.com
eprize.com
qoinpro.com
path.com
mobeoffice.com
taz.de
authorityroi.com
jqueryscript.net
wakeupnow.com
abakus-internet-marketing.de
cinepolis.com
dlisted.com
joomlaportal.de
ncsu.edu
imasters.com.br
adworkmedia.com
entropay.com
unionpaysecure.com
maxpark.com
popupads.ir
getrichradio.com
proranktracker.com
androidpit.com
polki.pl
ip2location.com
radiko.jp
wisegeek.org
trovit.com
jobisjob.co.in
quondos.com
softportal.com
nationaljournal.com
ebesucher.de
zive.cz
neurs.net
telewebion.com
performancehorizon.com
springpad.com
theync.com
mg.gov.br
globus-inter.com
osclass.org
cpasuperaffiliate.com
naukrigulf.com
trovit.com.mx
eventbrite.co.uk
paris.fr
kenrockwell.com
zagat.com
444.hu
barchart.com
edlen24.com
peixeurbano.com.br
flamingtext.com
speedyshare.com
seratnews.ir
bizpowa.com
grasscity.com
downloadab.com
sportdog.gr
programmableweb.com
fontpalace.com
head-fi.org
bitterstrawberry.com
responsinator.com
cuisineaz.com
work.ua
utsandiego.com
foozine.com
androidpit.de
invisionzone.com
top.de
rememberthemilk.com
infogr.am
blizko.ru
elle.fr
aremo.com.br
static.squarespace.com
fotki.com
datropy.com
adscendmedia.com
spartoo.com
wordcounter.net
example.com
turkcealtyazi.org
worthytoshare.net
ideeli.com
trthaber.com
romedic.ro
vudu.com
aplus.com
lavozdelmuro.com
citruspay.com
optimizehub.com
hobo-web.co.uk
dailybasis.com
sports.fr
dressupgamesite.com
smartbrief.com
scoopwhoop.com
dev7studios.com
longurl.it
privatbank.ru
wannonce.com
topnews.ru
55188.com
cinepolis.com.mx
gorilla-evolution.com
keyandway.com
perfectworld.eu
shopware.de
kyivpost.com
bavotasan.com
gnetwork.biz
farsisubtitle.com
kat.ph
vocabulary.com
daveramsey.com
mumsnet.com
alfajertv.com
gordonua.com
friendorfollow.com
peeplo.com
free-ebooks.net
adslzone.net
adultbay.org
softcoin.com
trovit.es
evsuite.com
waseet.net
sudaneseonline.com
mobypicture.com
pinkbike.com
fizzle.co
telly.com
blip.tv
basketball-reference.com
resellerratings.com
quirktools.com
afrihost.com
18qt.com
winscp.net&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/security/heartbleed-list-of-vulnerable-sites-in-the-alexa-10000&quot;&gt;Heartbleed - List of vulnerable sites in the Alexa 10000&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on April 10, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[Node.js] The build tools for Visual Studio XXXX cannot be found]]></title>
  <link>http://localhost:4000/node.js/node-js-the-build-tools-for-visual-studio-xxxx-cannot-be-found</link>
  <id>http://localhost:4000/node.js/node-js-the-build-tools-for-visual-studio-xxxx-cannot-be-found</id>
  <published>2014-03-29T00:00:00+01:00</published>
  <updated>2014-03-29T00:00:00+01:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;I got this error when trying to install a node.js package that wanted to build some associated .cc files with the Visual Studio 2010 compiler (v100 build tools). I haven’t had Visual Studio 2010 installed on my machine since Visual Studio 2012 came out, and &lt;em&gt;really&lt;/em&gt; didn’t want to reinstall it.&lt;/p&gt;

&lt;p&gt;It turns out that the solution to this is quite simple. You simply need to add the following argument to your install command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;--msvs_version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2013
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your install command will therefore look like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;npm install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pkg&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; -S --msvs_version&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2013
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/node.js/node-js-the-build-tools-for-visual-studio-xxxx-cannot-be-found&quot;&gt;[Node.js] The build tools for Visual Studio XXXX cannot be found&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on March 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[SEO for Single Page ASP.NET Apps with Spoon]]></title>
  <link>http://localhost:4000/open%20source/seo-for-single-page-asp-net-apps-with-spoon</link>
  <id>http://localhost:4000/open%20source/seo-for-single-page-asp-net-apps-with-spoon</id>
  <published>2014-03-24T00:00:00+01:00</published>
  <updated>2014-03-24T00:00:00+01:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Search engine optimisation is one of the most important aspects of any public web application. However single page application developers face a significant challenge in exposing their content to search engines and web crawlers.&lt;/p&gt;

&lt;p&gt;The problem is that the concept of a web page is not necessarily the same for a web server as it is for a user. While the user of an SPA could navigate through an entire site and be convinced that it was made up of countless individual web pages, a crawler attempting to crawl such a site would only ever end up downloading and analysing a single HTML file. To make matters worse, this file would without a doubt contain very little content, as most of the content that makes up an SPA is injected at runtime using JavaScript.&lt;/p&gt;

&lt;p&gt;The result of all this is that while SPAs provide users with an enjoyable user experience, web crawlers aren’t adapted to understand how SPAs are built and what kinds of content they contain.&lt;/p&gt;

&lt;h2 id=&quot;googles-solution&quot;&gt;Google’s solution&lt;/h2&gt;

&lt;p&gt;Luckily for us, Google has come up with a solution to this problem. The solution consists of a protocol which allows sites to tell crawlers about their dynamic content. &lt;a href=&quot;https://developers.google.com/webmasters/ajax-crawling/docs/specification&quot;&gt;The full text of the protocol can be found here&lt;/a&gt;, but the general idea is as follows. Normally SPAs use hash fragments to denote different pages in an app, like this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://www.mysite.com/#/contact&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The protocol states that a hashbang should be used instead of a hash, like so.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://www.mysite.com/#!/contact&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, whenever a crawler sees a link to a page containing a hashbang fragment such as this one, it makes a request to the site passing in the fragment as a query parameter.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://www.mysite.com?_escaped_fragment_=/contact&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When the server sees such a request come in, it can serve up a static HTML page containing all the content that is dynamically presented in the actual one.&lt;/p&gt;

&lt;h2 id=&quot;this-can-be-a-pain&quot;&gt;This can be a pain…&lt;/h2&gt;

&lt;p&gt;While this hashbang solution is quite good, it has one annoying consequence for web developers. In order to use this protocol, developers need to maintain static copies of all their dynamic pages which are publicly exposed to web crawlers. Keeping this content up to date as a site evolves is both repetitive and error prone. “There must be a better way!”&lt;/p&gt;

&lt;h2 id=&quot;there-is&quot;&gt;There is!&lt;/h2&gt;

&lt;p&gt;This is the problem that I have attempted to solve with Spoon. Spoon is a class library which takes snapshots of your dynamic web pages and serves them up when &lt;code&gt;_escaped_fragment_&lt;/code&gt; requests come in.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-spoon&quot;&gt;How to use Spoon&lt;/h2&gt;

&lt;p&gt;Using Spoon is really easy. Get the NuGet package (&lt;code&gt;PM&amp;gt; Install-Package Spoon&lt;/code&gt;) and hook the following code into to your site’s &lt;code&gt;Application_Start()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Dictionary mapping escaped fragments to page URLs.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This may be generated from a Sitemap.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;escapedFragmentUrlPairs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.example.com/!#/home&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.example.com/!#/about&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/contact&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.example.com/!#/contact&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshotsPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HostingEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MapPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[Path]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshotsDirectory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DirectoryInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshotsPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshotsDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumerateFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SnapshotManager&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitializeAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;escapedFragmentUrlPairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshotsPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, &lt;code&gt;escapedFragmentUrlPairs&lt;/code&gt; is a dictionary mapping escaped fragment values to URLs on your site. This essentially serves to tell Spoon that for a given hash fragment you want a snapshot of the corresponding page to be served to the web crawler. If you have a Sitemap defined for your site, this dictionary could easily be auto-generated from it. The other variable in the sample, &lt;code&gt;snapshotsPath&lt;/code&gt;, is simply the path to the folder where Spoon will store the snapshots it creates.&lt;/p&gt;

&lt;p&gt;To serve up snapshots you’ll need to modify your main action method to handle the &lt;code&gt;_escaped_fragment_&lt;/code&gt; parameter.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_escaped_fragment_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_escaped_fragment_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnapshotManager&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetSnapshotUrlAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_escaped_fragment_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Failure logic here.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all there is to it. When an &lt;code&gt;_escaped_fragment_&lt;/code&gt; is passed to the method, Spoon will look to see if that fragment has been registered. If it has, Spoon will return to you the path to the snapshot file that you can serve with ASP.NET’s &lt;code&gt;File()&lt;/code&gt; method. If the fragment hasn’t been registered, an &lt;code&gt;ArgumentException&lt;/code&gt; is thrown. It is up to you to catch this exception and do what you please. Be careful! If a snapshot cannot be served for a given page, then web crawlers won’t be able to tell what that page contains and that page will risk not being indexed correctly. At the very least the &lt;code&gt;catch&lt;/code&gt; should contain some form of logic to alert you, the developer, that a given &lt;code&gt;_escaped_fragment_&lt;/code&gt; has gone unserved in your web app.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;Spoon is fully open source, licensed under the MIT license. If you’re interested, the source code is available &lt;a href=&quot;https://github.com/LeviBotelho/spoon/issues&quot;&gt;create an issue on the GitHub page&lt;/a&gt;. Good luck, and happy SEO-ing!&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/open%20source/seo-for-single-page-asp-net-apps-with-spoon&quot;&gt;SEO for Single Page ASP.NET Apps with Spoon&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on March 24, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[AngularJS vs KnockoutJS]]></title>
  <link>http://localhost:4000/front-end%20web/angularjs-vs-knockoutjs</link>
  <id>http://localhost:4000/front-end%20web/angularjs-vs-knockoutjs</id>
  <published>2014-03-11T00:00:00+01:00</published>
  <updated>2014-03-11T00:00:00+01:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Lately I’ve been spending a lot of time with AngularJS. Coming from a KnockoutJS background, one of the first questions I had when I first started out with Angular was how the two frameworks compare. Hopefully this article will provide some answers for those in the same situation that I was.&lt;/p&gt;

&lt;h2 id=&quot;why-knockout-is-great&quot;&gt;Why Knockout is great&lt;/h2&gt;

&lt;p&gt;While the folks at Knockout state that it is an MVVM framework for JavaScript, I find that the best way to think of it is as a data binding framework. This data binding lets you do two really great things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can forget about having to make tons of calls all across the DOM to get a hold of field values. Everything is stored in a set of variables in your Knockout view model object which are all updated automatically.&lt;/li&gt;
&lt;li&gt;Dynamic user interfaces can be easily created. Collections of items can be displayed dynamically onscreen, and elements can be made to pop in and out of view at the flick of a boolean value. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## Why Angular is great&lt;/p&gt;

&lt;p&gt;I like to think of Angular as a full-featured front-end web application framework. That is to say that you could easily build an entire application with Angular and &lt;em&gt;only Angular&lt;/em&gt;. Angular has data binding, but it also has tons of built in features which encapsulate things like Ajax requests and i18n/l10n. It also has a killer API for building single page apps. And to top it all off, it even comes with its own “lite” version of jQuery.&lt;/p&gt;

&lt;h2 id=&quot;so-whats-the-difference&quot;&gt;So what’s the difference?&lt;/h2&gt;

&lt;p&gt;The biggest difference between the two frameworks boils down essentially to the choice between a simple framework that has useful, but limited features, and a complex framework that can do it all.&lt;/p&gt;

&lt;p&gt;Angular takes more work to set up than Knockout. Its architecture can seem a bit “elitist” in comparison, requiring more structure than a simple view model object to store values in. And it also takes considerably more time to get comfortable with if you’re using the framework for the first time.&lt;/p&gt;

&lt;p&gt;Furthermore, if you are trying to integrate Angular into an existing site or are trying to use it alongside other frameworks, you’ll usually find points of overlap between Angular and everything else. To give you an idea of what I mean, here are two examples of this that come to mind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are using ASP.NET MVC and want to implement a single page app, you'll have to change your thinking about what features are handled by ASP.NET and which are handled by your client-side code. This may seem obvious, but old habits die hard.&lt;/li&gt;
&lt;li&gt;If you have some form of client-side validation in place in an existing application, you won't be able to take advantage of Angular's data validation features should you choose to integrate it into your app. Don't get me wrong, this isn't a problem, however you may feel like you're not getting as much as you could be out of Angular. You can run into many cases like this, and if you end up having too many you may find that the simplicity/functionality tradeoff that you have to make when adopting Angular just isn't worth it. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## So which should I choose?&lt;/p&gt;

&lt;p&gt;I’m not going to go so far as to tell you which framework to choose for your projects. However I can share with you my logic for choosing between the two.&lt;/p&gt;

&lt;p&gt;If the project is new and I have free-reign over the architecture, then I’ll pretty much choose Angular every single time. It has just too many killer features to pass up, and I love having one framework that lets me do whatever I want to, as opposed to a collection of frameworks that I need to fuse together into one coherent app. Plus, the support for single page apps is just fantastic.&lt;/p&gt;

&lt;p&gt;If the project is not new, or if I don’t have free reign over the architecture, then I’ll tend towards Knockout. Speaking from experience, it isn’t too difficult to integrate Knockout into existing projects provided that the code is clean. And because Knockout is simple, you’ll get the data binding you want in a simple, easy to use package, which can be just what you need when doing brownfield web development.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/front-end%20web/angularjs-vs-knockoutjs&quot;&gt;AngularJS vs KnockoutJS&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on March 11, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[C#] The "?." operator in C# 6?]]></title>
  <link>http://localhost:4000/c%23/c-the-operator-in-c-6</link>
  <id>http://localhost:4000/c%23/c-the-operator-in-c-6</id>
  <published>2014-02-26T00:00:00+00:00</published>
  <updated>2014-02-26T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://visualstudio.uservoice.com/&quot;&gt;Visual Studio User Voice&lt;/a&gt; is a great site. It lets the community at large propose and vote for features in upcoming Microsoft products.&lt;/p&gt;

&lt;p&gt;Some time ago I cast my vote for a feature which I felt has been lacking for a &lt;em&gt;long&lt;/em&gt; time in C#: the &lt;code&gt;?.&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;?.&lt;/code&gt; would serve to eliminate chained null reference checks when accessing fields and properties on objects. The idea is that instead of writing this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return obj != null ? obj.X : null;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you could simply write this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return obj?.X;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pretty useful eh? Especially when you are dealing with several layers of objects embedded in one another (I’m looking at you, &lt;code&gt;HttpContext&lt;/code&gt;!).&lt;/p&gt;

&lt;p&gt;Well I was absolutely elated to receive an email in my inbox this morning from Visual Studio User Voice regarding this issue. C# language PM Mads Torgersen posted on the &lt;code&gt;?.&lt;/code&gt; idea page stating the following.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We are seriously considering this feature for C# and VB, and will be prototyping it in coming months. Syntax in C# would be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;`e?.x // member access`&lt;/li&gt;
&lt;li&gt;`e?.M(…) // method invocation`&lt;/li&gt;
&lt;li&gt;`e?[…] // indexing`&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Semantically this will be similar to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(e == null) ? null : e.x&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;etc., except that e will only be evaluated once of course.&lt;/p&gt;

&lt;p&gt;If the type of e.x (etc) is a non-nullable value type S, then the type of e?.x is S?. Otherwise the type of e?.x is the same as that of e.×. If we can’t tell whether the type is a non-nullable value type (because it is a type parameter without sufficient constraints) we’ll probably give a compile-time error.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s hope it makes the final cut!&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/c-the-operator-in-c-6&quot;&gt;[C#] The "?." operator in C# 6?&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on February 26, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[Azure/ClearDB] Migrating a MySQL database]]></title>
  <link>http://localhost:4000/windows%20azure/azurecleardb-migrating-a-mysql-database</link>
  <id>http://localhost:4000/windows%20azure/azurecleardb-migrating-a-mysql-database</id>
  <published>2014-02-14T00:00:00+00:00</published>
  <updated>2014-02-14T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I make no guarantees about the reliability of this migration procedure. This is the process that I followed, and while it did work for me that does not in any way mean that you will obtain the same results. In short, use at your own risk.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-strategy&quot;&gt;The strategy&lt;/h2&gt;

&lt;p&gt;I recently had to migrate this blog from one Azure account to another. While the site migration wasn’t terribly fascinating, the database migration was a task unto itself. Because Microsoft provides MySQL databases to Azure users via a third party (ClearDB), they do not support migrating MySQL databases like they do web roles, SQL server databases, and the like. I therefore had to manage the migration myself. This is how I did it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new database in the target Azure account to migrate to&lt;/li&gt;
&lt;li&gt;Get the credentials for the origin and target databases&lt;/li&gt;
&lt;li&gt;Run a migration script&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Step 1 is fairly simple and needs no explanation. Steps 2 and 3, however, are worth looking at in greater depth.&lt;/p&gt;

&lt;h2 id=&quot;getting-to-the-database&quot;&gt;Getting to the database&lt;/h2&gt;

&lt;p&gt;The first step to migrating the database is getting the required credentials. Specifically, the following information is required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database name&lt;/li&gt;
&lt;li&gt;Host name&lt;/li&gt;
&lt;li&gt;Username&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can get these values by logging in to the Windows Azure management portal, finding the entry for the MySQL database (in my case it was a “Linked Resource” associated with my Azure Web Site) and clicking on the DB name. This will take you to the ClearDB website. Click on the &lt;strong&gt;Endpoint Information&lt;/strong&gt; tab, and voilà.&lt;/p&gt;

&lt;p&gt;[](http://www.levibotelho.com/wp-content/uploads/2014/02/Migrating-ClearDB.png)&lt;/p&gt;

&lt;h2 id=&quot;the-script&quot;&gt;The script&lt;/h2&gt;

&lt;p&gt;In order to perform the actual migration, you’ll need mysqldump.exe on your machine. If you have MySQL installed, you’ll be able to find it at &lt;strong&gt;C:\Program Files\MySQL\MySQL Server 5.5\bin&lt;/strong&gt;. Open a command prompt, navigate to the directory where mysqldump lives, and then execute the following command:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;mysqldump –single-transaction -u &lt;strong&gt;[Origin Username]&lt;/strong&gt; –p&lt;strong&gt;[Origin Password]&lt;/strong&gt; -h &lt;strong&gt;[Origin Hostname]&lt;/strong&gt; &lt;strong&gt;[Origin Database Name]&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;mysql -h &lt;strong&gt;[Target Hostname]&lt;/strong&gt; -u &lt;strong&gt;[Target Username]&lt;/strong&gt; –p&lt;strong&gt;[Target Password]&lt;/strong&gt; -D &lt;strong&gt;[Target Database]&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t worry, I too got a headache when I first laid eyes on it. There are three things that I must note about this before continuing on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no space between the `–p` switch and the database password. That is intentional.&lt;/li&gt;
&lt;li&gt;[This command will apparently delete data not covered by the backup in the target database](http://stackoverflow.com/q/5475200/1068266). I have assumed here that you are backing up to a new database containing no prior data.&lt;/li&gt;
&lt;li&gt;I understand that it is often considered bad practice to embed the password directly in the command as I have done here. However, when I included just the password switch without supplying a password, the command line prompted me for the passwords to both databases simultaneously which understandably resulted in an error. I’m no DBA, so it’s perfectly possible that there is a way around this. If you know of one, leave a comment!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyways, launch the command with the arguments specified, and if your database isn’t too large, in a matter of minutes all your data will, with a little luck, have successfully been migrated from one database to another.&lt;/p&gt;

&lt;h2 id=&quot;a-word-on-azure-migration&quot;&gt;A word on Azure migration&lt;/h2&gt;

&lt;p&gt;If you ask Microsoft to migrate your Azure resources from one account to another, they will kindly inform you that the target account must be empty. They will also inform you that your MySQL database will be lost in the migration process (at least that’s what they told me). What this means for you, the account owner, is that you basically have two migration strategies to consider.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Migrate everything yourself, and delete the old stuff when you’re done.&lt;/li&gt;
&lt;li&gt;Migrate your MySQL database to a backup DB, get Microsoft to perform the rest of the migration, and then perform the MySQL migration process once more to restore the backup to your new account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my case I chose option 1, but the decision is an important one and needs to be made on a case-by-case basis. If you’re in a similar scenario, be sure to give this some thought, and in all cases be sure to back up liberally so that you’re covered just in case things go haywire halfway through.&lt;/p&gt;

&lt;p&gt;Good luck, and happy migration!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/windows%20azure/azurecleardb-migrating-a-mysql-database&quot;&gt;[Azure/ClearDB] Migrating a MySQL database&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on February 14, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[XML Schema] Allow elements to appear any number of times, in any order]]></title>
  <link>http://localhost:4000/miscellaneous/xml-schema-allow-elements-to-appear-any-number-of-times-in-any-order</link>
  <id>http://localhost:4000/miscellaneous/xml-schema-allow-elements-to-appear-any-number-of-times-in-any-order</id>
  <published>2014-02-10T00:00:00+00:00</published>
  <updated>2014-02-10T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;It’s not every day that I write XML schema files, but when I do I often have to remind myself of how to perform this simple task. For our example we’ll write a schema to describe the following document.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;inventory&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Desk&amp;gt;&amp;lt;/Desk&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Chair&amp;gt;&amp;lt;/Chair&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Chair&amp;gt;&amp;lt;/Chair&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- and so on… --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/inventory&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our inventory can contain any number of desks and chairs, and there is no restriction on the order of the elements in our document. Now if you’re like me and have to write a schema for this, you’ll be tempted to use an &lt;code&gt;all&lt;/code&gt; element like so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Inventory&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:complexType&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:all&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Desk&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Chair&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xs:all&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xs:complexType&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xs:element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem with this is that the &lt;code&gt;all&lt;/code&gt; element requires that each child appear once and only once. Oh, and you can’t modify this behaviour by applying a &lt;code&gt;maxOccurs&lt;/code&gt; attribute to it.&lt;/p&gt;

&lt;p&gt;The solution is to instead use a &lt;code&gt;choice&lt;/code&gt; element, with &lt;code&gt;maxOccurs&lt;/code&gt; set to &lt;code&gt;unbounded&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Inventory&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:complexType&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:choice&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxOccurs=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;unbounded&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Desk&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Chair&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xs:choice&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xs:complexType&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xs:element&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;maxOccurs&lt;/code&gt; states how many children the &lt;code&gt;choice&lt;/code&gt; element may have, which in our case is an unlimited number.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/miscellaneous/xml-schema-allow-elements-to-appear-any-number-of-times-in-any-order&quot;&gt;[XML Schema] Allow elements to appear any number of times, in any order&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on February 10, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[knockout.js] Foreach binding to an array of strings (or numbers, or bools…)]]></title>
  <link>http://localhost:4000/front-end%20web/knockout-js-foreach-binding-to-an-array-of-strings-or-numbers-or-bools</link>
  <id>http://localhost:4000/front-end%20web/knockout-js-foreach-binding-to-an-array-of-strings-or-numbers-or-bools</id>
  <published>2014-01-29T00:00:00+00:00</published>
  <updated>2014-01-29T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;I’m currently working on a web application where I have to write an interface that allows users to delete photos that they have uploaded to the site. The user interface and corresponding view model are based on the following design.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;click: delete&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Delete Photo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foreach: photos&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text: $data&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;attr: {src: $data}, click: $root.select&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;photos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observableArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;url0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;url1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;url2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, we have a collection of photo urls stored in an observable array of strings. By way of a foreach binding we create an image for each url which can be selected by clicking on it. Clicking on the delete button deletes the currently selected image, which works by removing it from the observable array and unselecting it.&lt;/p&gt;

&lt;p&gt;Except that the code as it is written above doesn’t work. When we attempt to delete an image, the url is not correctly removed from the observable collection.&lt;/p&gt;

&lt;p&gt;The reason for this is quite interesting. &lt;code&gt;remove()&lt;/code&gt; works by searching the observable array for any members that are exactly equal to the argument passed to the method and removing them. Notice how I said &lt;em&gt;exactly&lt;/em&gt; equals? Herein lies our problem. If we select the photo with the src attribute set to &lt;code&gt;url0&lt;/code&gt; and then examine the value of &lt;code&gt;self.selected&lt;/code&gt; using a JavaScript console, we get something that looks like the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we have here is an instance of the &lt;code&gt;String&lt;/code&gt; class. This is &lt;em&gt;not&lt;/em&gt; the same thing as the &lt;code&gt;string&lt;/code&gt; primitive type which is how we normally picture a string in JavaScript. The problem is that our observable array of urls contains string primitives. If we compare a string primitive to an equivalent &lt;code&gt;String&lt;/code&gt; object using the “strict equal” operator (&lt;code&gt;===&lt;/code&gt;), the comparison returns false. This is the comparison that &lt;code&gt;remove&lt;/code&gt; uses, and it is for this reason that our url isn’t removed from the observable array when we delete the image. As far as our JavaScript is concerned, the value we wish to remove from the array simply doesn’t exist!&lt;/p&gt;

&lt;p&gt;So how do we get around this? Well, if we set &lt;code&gt;self.selected&lt;/code&gt; in the &lt;code&gt;data-bind&lt;/code&gt; attribute using an inline function instead of in the view model, the string primitive is stored in the variable and not the object. This isn’t a very good solution however, because it requires us to scatter our view model logic throughout the HTML page. A better way to accomplish this is to call &lt;code&gt;valueOf()&lt;/code&gt; on &lt;code&gt;this&lt;/code&gt; when we are setting the &lt;code&gt;selected&lt;/code&gt; variable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;valueOf()&lt;/code&gt; obtains the primitive value from the &lt;code&gt;String&lt;/code&gt; class, and setting this as our selected photo url will ensure that we can remove it from the observable array when we need to. &lt;code&gt;valueOf()&lt;/code&gt; is also a good choice because it works for all class/primitive type pairs, not just with &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;. This is important because we get the same behaviour when working with arrays of numbers or bools as well.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/front-end%20web/knockout-js-foreach-binding-to-an-array-of-strings-or-numbers-or-bools&quot;&gt;[knockout.js] Foreach binding to an array of strings (or numbers, or bools…)&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on January 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[knockout.js] Boolean binding not working]]></title>
  <link>http://localhost:4000/front-end%20web/knockout-js-boolean-binding-not-working</link>
  <id>http://localhost:4000/front-end%20web/knockout-js-boolean-binding-not-working</id>
  <published>2014-01-28T00:00:00+00:00</published>
  <updated>2014-01-28T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Here’s a quick fix if you’re doing data binding in knockout and wondering why a binding like the following isn’t working:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;visible: !isMessageHidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// In your view model&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMessageHidden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You need to add a set of parentheses after the &lt;code&gt;isMessageHidden&lt;/code&gt; like so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;visible: !isMessageHidden()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key to understanding this is understanding that &lt;code&gt;isMessageHidden&lt;/code&gt; is not a boolean value, but an observable which stores a boolean value. If we simply refer to this observable by name in our data-binding code, then knockout will infer that we want to retrieve the stored value. However, if we wish to refer to the stored value within a statement, such as &lt;code&gt;!isMessageHidden()&lt;/code&gt;, then the parentheses are required in order to indicate that we want the stored value and not the observable itself. This tripped me up a few times when I was learning Knockout. Hope this helps somebody!&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/front-end%20web/knockout-js-boolean-binding-not-working&quot;&gt;[knockout.js] Boolean binding not working&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on January 28, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[C#] How can is outperform as?]]></title>
  <link>http://localhost:4000/c%23/c-how-can-is-outperform-as</link>
  <id>http://localhost:4000/c%23/c-how-can-is-outperform-as</id>
  <published>2014-01-26T00:00:00+00:00</published>
  <updated>2014-01-26T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Take a look at this code&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// either&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intVal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Would you believe that the variant using &lt;code&gt;is&lt;/code&gt; executes over six times faster than the variant that uses &lt;code&gt;as&lt;/code&gt;? And before you accuse me of being unfair, the difference is not only due to the overhead involved in using a nullable integer. When dealing with checking the type compatibility of value types, &lt;code&gt;is&lt;/code&gt; is genuinely faster than &lt;code&gt;as&lt;/code&gt;. This runs counter to what many developers assume, which is that &lt;code&gt;as&lt;/code&gt; is always the better choice due to the fact that you only validate type compatibility once.&lt;/p&gt;

&lt;p&gt;To understand why this is the case, we first need to get to know two IL instructions.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-il-introduction&quot;&gt;A quick IL introduction&lt;/h2&gt;

&lt;h3 id=&quot;castclass&quot;&gt;castclass&lt;/h3&gt;

&lt;p&gt;The castclass instruction serves to cast a variable to a specified type. If the cast succeeds, the casted value is returned to the stack unchanged, with the runtime now treating it as an instance of the new type. If the cast fails, an InvalidCastException is thrown.&lt;/p&gt;

&lt;h3 id=&quot;isinst&quot;&gt;isinst&lt;/h3&gt;

&lt;p&gt;The isinst instruction serves to test whether a variable is castable to another type. If it is, the tested value is returned to the stack unchanged, with the runtime now treating it as an instance of the new type, just like castclass. If it isn’t, null is returned and no exception is thrown.&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-problem&quot;&gt;Back to the problem&lt;/h2&gt;

&lt;p&gt;Let’s now look at the IL for the &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt; variants to try and understand why &lt;code&gt;is&lt;/code&gt; offers better performance.&lt;/p&gt;

&lt;h3 id=&quot;is&quot;&gt;is&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;// Local variable 2 holds “val” which is either null or a boxed int.
// “val” is on the top of the stack.
IL_0017:  isinst      System.Int32
IL_001C:  brfalse.s   IL_0027 // Loop if not an int
IL_001E:  ldloc.0     // Load sum
IL_001F:  ldloc.2     // Load val
IL_0020:  unbox.any   System.Int32 // Unbox the boxed int.
// Add the value and loop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;as&quot;&gt;as&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;// Local var 2 holds “val” which is either null or a boxed int?.
// “val” is on the top of the stack.
IL_0017:  isinst      System.Nullable&amp;lt;System.Int32&amp;gt;
IL_001C:  unbox.any   System.Nullable&amp;lt;System.Int32&amp;gt;
IL_0021:  stloc.3     // store the unboxed value (intVal)
IL_0022:  ldloca.s    03 // Load intVal
IL_0024:  call        System.Nullable&amp;lt;System.Int32&amp;gt;.get_HasValue
IL_0029:  brfalse.s   IL_0035 // Branch if intVal is null
IL_002B:  ldloc.0     // sum
IL_002C:  ldloca.s    03 // intVal
IL_002E:  call        System.Nullable&amp;lt;System.Int32&amp;gt;.get_Value
// Add the value and loop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;breaking-it-down&quot;&gt;Breaking it down&lt;/h3&gt;

&lt;p&gt;In the case of the &lt;code&gt;is&lt;/code&gt; statement, we start by verifying if val is an integer. If it is, we load sum onto the stack, reload val onto the stack and unbox it. We then add the unboxed val to sum and loop.&lt;/p&gt;

&lt;p&gt;The code for &lt;code&gt;as&lt;/code&gt; is a little more complicated. We start out by executing the isinst instruction on val to check if it can be treated as a nullable integer. The result of this call is assigned to the local variable intVal. Note that intVal is a boxed nullable integer which holds either val or null if val is not a valid integer. intval is now unboxed and HasValue is called to see whether or not it is null.&lt;/p&gt;

&lt;p&gt;Notice the key difference in the &lt;code&gt;as&lt;/code&gt; code. Unboxing is &lt;em&gt;always&lt;/em&gt; performed on val when we are using &lt;code&gt;as&lt;/code&gt;. This is because the result of the isinst instruction is a boxed nullable integer holding either a valid int or a null value that we need to unbox in order to call HasValue. When using &lt;code&gt;is&lt;/code&gt; this unboxing is only performed if we know we have an integer on our hands.&lt;/p&gt;

&lt;p&gt;It is this additional boxing that is responsible, along with the nullable overhead, for the performance loss incurred when using &lt;code&gt;as&lt;/code&gt;. The cost of the unboxing combined with the cost of having to use a nullable value type greatly outweighs the small performance gain achieved by verifying type compatibility only once. If you modify the code such that both variants use a nullable integer and that the &lt;code&gt;if&lt;/code&gt; statement always returns an integer (so that unboxing is required 100% of the time in both cases), you will see the performance difference disappear.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/c-how-can-is-outperform-as&quot;&gt;[C#] How can is outperform as?&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on January 26, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[C#] Compare generic variables for equality]]></title>
  <link>http://localhost:4000/c%23/c-compare-generic-variables-for-equality</link>
  <id>http://localhost:4000/c%23/c-compare-generic-variables-for-equality</id>
  <published>2014-01-13T00:00:00+00:00</published>
  <updated>2014-01-13T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;This is a simple task, yet one which is frequently carried out incorrectly. This kind of comparison is often required when dealing with classes that look like the following.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Test for equality before setting.&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Invoke an event here...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the knee-jerk reaction to compare &lt;code&gt;_variable&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; in this case is to do this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Monkey business...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this doesn’t compile. This makes sense, because we cannot guarantee that the type &lt;code&gt;T&lt;/code&gt; overloads the equality operator (reference types do by default, but value types do not). In light of this problem, many people will resort to the following.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Monkey business...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However this poses a different problem. If &lt;code&gt;_variable&lt;/code&gt; is ever null, your program will throw a null reference exception. But there is a way around this. Simply use the static implementation of &lt;code&gt;Equals()&lt;/code&gt; on &lt;code&gt;System.Object&lt;/code&gt; as follows.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We don’t even need to write object.Equals&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// because we are currently on an object.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_variable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Monkey business.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Problem solved!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/c-compare-generic-variables-for-equality&quot;&gt;[C#] Compare generic variables for equality&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on January 13, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[C#] How does the garbage collector work?]]></title>
  <link>http://localhost:4000/c%23/c-how-does-the-garbage-collector-work</link>
  <id>http://localhost:4000/c%23/c-how-does-the-garbage-collector-work</id>
  <published>2014-01-10T00:00:00+00:00</published>
  <updated>2014-01-10T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;what-is-garbage&quot;&gt;What is garbage?&lt;/h2&gt;

&lt;p&gt;“Garbage” consists of objects created during a program’s execution on the managed heap that are no longer accessible by the program. Their memory can be reclaimed and reused with no averse effects.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-garbage-collector&quot;&gt;What is the garbage collector?&lt;/h2&gt;

&lt;p&gt;The garbage collector is a mechanism which identifies garbage on the managed heap and makes its memory available for reuse. This eliminates the need for the programmer to manually delete objects which are no longer required for program execution. This reuse of memory helps reduce the amount of total memory that a program needs to run. In technical terms, we say that it keeps the program’s “working set” small.&lt;/p&gt;

&lt;h2 id=&quot;how-does-the-garbage-collector-identify-garbage&quot;&gt;How does the garbage collector identify garbage?&lt;/h2&gt;

&lt;p&gt;In Microsoft’s implementation of the .NET framework the garbage collector determines if an object is garbage by examining the reference type variables pointing to it. In the context of the garbage collector, reference type variables are known as “roots”. Examples of roots include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A reference on the stack&lt;/li&gt;
&lt;li&gt;A reference in a static variable&lt;/li&gt;
&lt;li&gt;A reference in another object on the managed heap that is not eligible for garbage collection&lt;/li&gt;
&lt;li&gt;A reference in the form of a local variable in a method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take the following method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Objects added!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the method starts to execute, a  &lt;code&gt;List&amp;lt;object&amp;gt;&lt;/code&gt; is instantiated on the managed heap along with several objects. The List contains a root to each of the objects, and the stack contains a root to the List. While the method is executing, all of these roots are accessible from within the program and are considered to be “active”. When the method finishes executing, the stack is cleaned up, removing the root pointing to the List. The List is now no longer accessible within the program. All of the roots contained by the List (those pointing to the objects) are now considered to be “inactive”.&lt;/p&gt;

&lt;p&gt;The garbage collector identifies garbage by examining an application’s roots. Objects which have no active roots pointing to them are considered to be garbage.
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more-3232&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-does-the-garbage-collector-manage-to-collect-garbage-without-impacting-application-performance&quot;&gt;How does the garbage collector manage to collect garbage without impacting application performance?&lt;/h2&gt;

&lt;p&gt;The truth is that the garbage collector &lt;em&gt;does&lt;/em&gt; impact application performance. However, Microsoft has done a very good job at ensuring that it runs as quickly and efficiently as possible, and its impact is virtually unnoticeable from a user standpoint. It manages to do this by employing a wide variety of strategies and optimisations, a few of which we’ll talk about here.&lt;/p&gt;

&lt;h3 id=&quot;reference-tracking-optimisations&quot;&gt;Reference tracking optimisations&lt;/h3&gt;

&lt;p&gt;When the garbage collector begins a collection, it starts by setting a bit on every object which &lt;em&gt;could potentially&lt;/em&gt; be garbage to 0. This marks these objects for collection. It then traverses the active roots in the application and sets that bit to 1 on every object which is not in fact garbage.&lt;/p&gt;

&lt;p&gt;Remember from our previous example that when an object is considered not to be garbage, all objects that it references are also considered not to be garbage. This means that marking a single object as not garbage (such as a List) can result in hundreds or thousands of others also being marked. The garbage collector makes this process more efficient by examining the garbage collection bit before marking a given object. If the bit is already set to 1, it simply moves on, knowing that the object and its roots and their roots and so on and so forth have already been traversed. This makes the marking process significantly more efficient.&lt;/p&gt;

&lt;h3 id=&quot;generations&quot;&gt;Generations&lt;/h3&gt;

&lt;p&gt;The garbage collector makes one big assumption about the lifetime of objects in an application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The length of time that an object has been alive is inversely proportional to the probability that it will need to be garbage collected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put another way, objects that have been around for a long time are fairly unlikely to be garbage, and objects that haven’t been around for so long are considerably more likely to be garbage. By and large, this assumption proves to be true for most applications. The garbage collector leverages this fact to improve performance by implementing what are known as generations.&lt;/p&gt;

&lt;p&gt;You can think of generations as a way of classifying objects by how long they have been alive. The garbage collector groups objects into three generations, known as generations 0, 1 and 2. Objects in generation 0 have never survived a garbage collection. They’re brand new! Objects in generation 1 have survived one garbage collection, and objects in generation 2 have survived two or more collections.&lt;/p&gt;

&lt;p&gt;When a garbage collection begins, the garbage collector can pick and choose which generations it wishes to collect. On average, collections in generation 0 will be more effective than those in generation 1, and those in generation 1 will be more effective than those in generation 2. The garbage collector can therefore decide to only collect generation 0, for example, and hopefully reclaim a substantial amount of memory without having to collect the entire managed heap.&lt;/p&gt;

&lt;h3 id=&quot;compacting&quot;&gt;Compacting&lt;/h3&gt;

&lt;p&gt;When the runtime allocates heap memory, it attempts to do so in a linear fashion. Objects are created one after another on the heap, and the runtime makes use of what is called the “next object pointer” to know where to place the next object. As you can imagine, however, once a garbage collection has taken place, the once smooth, contiguous block of memory that made up the heap is left full of holes. However, the garbage collector doesn’t leave the heap in this state*. Instead, it embarks on a compacting phase, whereby it moves objects back towards the beginning of the heap, filling the reclaimed memory spaces in the process.&lt;/p&gt;

&lt;p&gt;As you can imagine, moving objects around is no trivial matter. When an object is moved in memory, existing references to it need to be updated. This understandably requires that program execution be suspended, as to ensure that all references to a given object are valid at all times during program execution. The CLR attempts to make this suspension as painless as possible by fine-tuning how and when garbage collection executes. Details of these techniques go beyond the scope of this article, but can be found &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee851764(v=vs.110).aspx&quot;&gt;here on the MSDN website&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;smart-invocation&quot;&gt;Smart invocation&lt;/h3&gt;

&lt;p&gt;The garbage collector ensures that it only collects garbage when it really needs to by setting out a memory budget for each of its three generations. These budgets can be modified by the CLR throughout program execution in order to be as well-adapted as possible to the execution conditions of a given program. When generation 0 of the managed heap surpasses its budget, the garbage collection process begins. The garbage collector checks to see if any other generations have surpassed their budgets, and then decides which generations to actually collect. This often means that garbage collection is only performed on a portion of the objects living on the managed heap, which makes the process significantly more efficient.&lt;/p&gt;

&lt;p&gt;It is important to note that while the majority of garbage collections in an average program are invoked when generation 0 exceeds its memory budget, garbage collections can also be triggered by other events. These include the system reporting low memory conditions, the unloading of an AppDomain, the shutting down of the CLR, or a manual call to the GC.Collect method**.&lt;/p&gt;

&lt;h2 id=&quot;final-word&quot;&gt;Final word&lt;/h2&gt;

&lt;p&gt;Hopefully this article will have given you a broad idea of how the garbage collector works in Microsoft’s implementation of the .NET Framework. The garbage collector is a very, very complex mechanism which could merit its own book, and this article by no means constitutes a deep dive into its inner workings. Instead, I’ve attempted to provide a simple and concise explanation of the key talking points, with hopes that it will give you a basic understanding of what goes on behind the scenes in your .NET programs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;* Actually, it does leave the large object heap in this state. The large object heap is beyond the scope of this article, however so you won’t hear any more about it for the time being.&lt;/p&gt;

&lt;p&gt;** Calling GC.Collect is discouraged by Microsoft and is generally to be avoided. The garbage collector is a very intelligent mechanism, and has much more information at its disposal than you do when it evaluates whether or not a collection is needed.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/c-how-does-the-garbage-collector-work&quot;&gt;[C#] How does the garbage collector work?&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on January 10, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[C#] Static type constructors and beforefieldinit]]></title>
  <link>http://localhost:4000/c%23/c-static-type-constructors-and-beforefieldinit</link>
  <id>http://localhost:4000/c%23/c-static-type-constructors-and-beforefieldinit</id>
  <published>2014-01-04T00:00:00+00:00</published>
  <updated>2014-01-04T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;If you’re a professional programmer (and chances are that you are), I’ll bet that at one time or another you’ve gotten into some form of quarrel over which of the following is “better”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageHolder1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageHolder2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MessageHolder2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While I find the MessageHolder1 syntax to be stylistically superior, is it also in fact a potentially better choice when it comes to performance. The key to understanding why, as is frequently the case, is in the IL. Take a look at the definitions of the two classes.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;.class private auto ansi beforefieldinit ConsoleApplication1.MessageHolder1
       extends [mscorlib]System.Object
{
} // end of class ConsoleApplication1.MessageHolder1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;.class private auto ansi ConsoleApplication1.MessageHolder2
       extends [mscorlib]System.Object
{
} // end of class ConsoleApplication1.MessageHolder2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice anything? The definition for the MessageHolder1 class contains an additional type attribute, “beforefieldinit”. To understand what impact this attribute has, we must first get one thing out of the way. As far as C# is concerned, both class definitions are equivalent. Each class has what is known as a “type initializer”, which is simply code that is executed to prepare the type for use. MessageHolder1’s type initializer is defined implicitly in the static “message” variable assignment, and MessageHolder2’s type initializer is defined explicitly as a static type constructor.&lt;/p&gt;

&lt;p&gt;What the beforefieldinit attribute does is define under what conditions the CLR can and must execute the class’s type initializer. When beforefieldinit is &lt;strong&gt;not&lt;/strong&gt; present, a type’s initializer method is triggered by any of the following events:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First access to any static field of that type&lt;/li&gt;
&lt;li&gt;First invocation of any static method of that type&lt;/li&gt;
&lt;li&gt;First invocation of any instance or virtual method of that type if it is a value type&lt;/li&gt;
&lt;li&gt;First invocation of any constructor for that type.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What this basically means is that before the type is used in any way, the type initializer method must be executed. It therefore makes good sense that this attribute is not applied to classes which contain an explicit type constructor. As the CLR doesn’t know what impact the type constructor may have on the class, or on any other component of the program for that matter, it must execute it right before the class is used in any way. This means that the type constructor’s execution is both reliable and predictable.&lt;/p&gt;

&lt;p&gt;However, if the only job of a type initializer is to assign values to static variables, then we don’t necessarily need to be as demanding as to when the assignment takes place. All we require from the CLR is that the variable is assigned before we access it for the first time. And indeed, this is the impact that beforefieldinit has on a class. To quote the CIL spec, beforefieldinit ensures that…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…the type’s initializer method is executed at, or sometime before, first access to any static field defined for that type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This gives the CLR significantly more freedom as to when it wishes to assign static fields. Although we cannot be 100% sure of when the assignment will take place, the assumption here is that the CLR will act when it feels the time is right, which should in theory improve application efficiency.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/c-static-type-constructors-and-beforefieldinit&quot;&gt;[C#] Static type constructors and beforefieldinit&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on January 04, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[Visual Studio] How to view JITted code]]></title>
  <link>http://localhost:4000/visual%20studio/c-how-to-view-jitted-code</link>
  <id>http://localhost:4000/visual%20studio/c-how-to-view-jitted-code</id>
  <published>2013-12-17T00:00:00+00:00</published>
  <updated>2013-12-17T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;We spend a lot of time in these posts looking at the CIL that is generated by the C# compiler. But did you know that you can actually go a level deeper and view the assembly code generated by the JITter?&lt;/p&gt;

&lt;h2 id=&quot;run-your-program-into-a-breakpoint&quot;&gt;1. Run your program into a breakpoint&lt;/h2&gt;

&lt;p&gt;[](http://www.levibotelho.com/wp-content/uploads/2013/12/View-JITted-Code-1.png)&lt;/p&gt;

&lt;h2 id=&quot;go-to-debug--windows--disassembly&quot;&gt;2. Go to DEBUG ➙ WINDOWS ➙ DISASSEMBLY&lt;/h2&gt;

&lt;p&gt;[](http://www.levibotelho.com/wp-content/uploads/2013/12/View-JITted-Code-2.png)&lt;/p&gt;

&lt;h2 id=&quot;view-your-disassembled-code&quot;&gt;3. View your disassembled code&lt;/h2&gt;

&lt;p&gt;[](http://www.levibotelho.com/wp-content/uploads/2013/12/View-JITted-Code-3.png)&lt;/p&gt;

&lt;p&gt;Easy!&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/visual%20studio/c-how-to-view-jitted-code&quot;&gt;[Visual Studio] How to view JITted code&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on December 17, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[C#] How method calling works]]></title>
  <link>http://localhost:4000/c%23/c-how-method-calling-works</link>
  <id>http://localhost:4000/c%23/c-how-method-calling-works</id>
  <published>2013-12-15T00:00:00+00:00</published>
  <updated>2013-12-15T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Method calling is a joint operation performed by the C# compiler and the CLR. As we will see in this article, the role of each can vary depending on the context in which the method is called.&lt;/p&gt;

&lt;h2 id=&quot;the-type-object&quot;&gt;The type object&lt;/h2&gt;

&lt;p&gt;The key to understanding the basics of method calling in C# is understanding how the CLR manages types. For every type used in a program, the CLR maintains a corresponding type object on the managed heap which includes pretty much everything the runtime needs to know in regards to a given type. One of the things that the type object contains is a method table, which the runtime can query to determine which methods are implemented by a given type and where in the assembly the method implementation code can be found. The method table is indispensable when making virtual method calls, and as such the runtime must be able to access it quickly and easily. To make this possible, every object present on the managed heap contains what is known as a type object pointer, which provides the runtime with direct access to the type object for a given type.&lt;/p&gt;

&lt;h2 id=&quot;polymorphism-and-virtual-methods&quot;&gt;Polymorphism and virtual methods&lt;/h2&gt;

&lt;p&gt;Although it may seem strange to have begun this article looking at virtual method calls instead of nonvirtual calls, most method calls in a given C# program are made virtually, including many made to nonvirtual methods. &lt;a href=&quot;http://www.levibotelho.com/call-and-callvirt-in-cil/&quot;&gt;We discussed this in depth in a recent article which looked at the difference between the call and callvirt CIL instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now then, down to business. In order to understand how the C# compiler and the CLR handle virtual method calls, we’ll use the following program as an example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a classic case of polymorphism. Although within the context of GetString() ToString() is being called on an object, the implementation of ToString() that is called is that defined by System.String. But how does this work? The first step in the process is performed by the C# compiler. If we were to look at the code for this program, we would see that arg.ToString() is called with a “callvirt” instruction. This instructs the CLR to call ToString() virtually.&lt;/p&gt;

&lt;p&gt;What actually happens is that when ToString() is called, the runtime accesses arg’s type object via its type object pointer. Because arg is really a string, the type object for System.String will be accessed. The runtime will then access the type object’s method table and see that it System.String provides an implementation for ToString(). It will then access the method code, compile it if necessary, and execute it.&lt;/p&gt;

&lt;p&gt;On the other hand, if we passed an object to GetString() that did not provide an implementation of ToString(), the CLR would simply begin walking up the inheritance tree, checking each ancestor type until it found one which did. This is made possible because each type object contains a reference to its parent type. An inheritance chain is therefore created for every type in a .NET program which in every case leads back to System.Object.&lt;/p&gt;

&lt;h2 id=&quot;value-types&quot;&gt;Value types&lt;/h2&gt;

&lt;p&gt;Although brilliantly designed, the above algorithm for making virtual method calls has one important weakness. It is entirely dependent on the type object, and therefore the type object pointer. So then what happens if we call a method on a value type which is not necessarily represented on the managed heap, and therefore may not contain a type object pointer? Well, as is often the case the best way to find out is by writing a small test program.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;m&quot;&gt;6.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s start by looking at the IL for the two calls to ToString().&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;// StringBuilder
IL_000c:  callvirt   instance string [mscorlib]System.Object::ToString()
// ...
// Int32
IL_001a:  call       instance string [mscorlib]System.Int32::ToString()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When ToString() is called on the StringBuilder instance, we can see that on the IL level, we are calling ToString() polymorphically on System.Object. Because StringBuilder is a reference type, the runtime will use the type object to navigate to the correct implementation of ToString(), and the code will function as anticipated. In this case, the C# compiler hasn’t done a whole lot and has left it up to the CLR to determine which method to invoke.&lt;/p&gt;

&lt;p&gt;This changes considerably, however, when we call ToString() on System.Int32, a value type which does not have an integrated a type object pointer. In this case, the C# compiler has instructed the CLR to make a nonvirtual call to the implementation of ToString() that is written directly into System.Int32. The CLR therefore doesn’t need to access the type object. It simply follows the instructions that the C# compiler has given it.&lt;/p&gt;

&lt;p&gt;Now let’s look at what happens when we call GetString(), which takes an object as a parameter and returns the result of calling ToString() on the object. The first thing we need to do is to look at the IL for the GetString method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;.method private hidebysig static string  GetString(object arg) cil managed
{
  // Code size       7 (0x7)
  .maxstack  8
  IL_0000:  ldarg.0
  IL_0001:  callvirt   instance string [mscorlib]System.Object::ToString()
  IL_0006:  ret
} // end of method Program::GetString
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the C# compiler cannot know ahead of time on what type ToString() will really be called, it simply instructs the CLR to make a virtual method call to ToString() and lets the CLR determine which implementation to invoke. This is exactly the same code that we saw when we called ToString() directly on our instance of StringBuilder earlier on. It should therefore come as no surprise that when we pass a StringBuilder to GetString, the StringBuilder is simply loaded onto the stack and the GetString() method is invoked like so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;  IL_0024:  ldloc.0
  IL_0025:  call       string ConsoleApplication1.Program::GetString(object)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As our instance of StringBuilder lives on the heap, when executing GetString() the CLR use the StringBuilder’s type object pointer to access its type object’s method tables and will invoke the correct implementation of ToString().&lt;/p&gt;

&lt;p&gt;But what will happen when we pass an Int32 to GetString()?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;  IL_002f:  ldc.i4.6
  IL_0030:  box        [mscorlib]System.Int32
  IL_0035:  call       string ConsoleApplication1.Program::GetString(object)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aha! In order to make this call, the compiler has gone ahead and boxed our Int32 before passing it as an argument to GetString(). During the boxing, a type object pointer will have been created and embedded in the object’s implementation on the heap. When ToString() is invoked on our Int32 in the context of GetString(), the CLR will be able to use this type object pointer to find the correct implementation of ToString() to execute&lt;/p&gt;

&lt;h2 id=&quot;a-quick-summary&quot;&gt;A quick summary…&lt;/h2&gt;

&lt;p&gt;Hopefully this article will have provided you with some insight into how method calls are handled in C#. To sum up, here are the main take-away points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Method calls are handled jointly by the C# compiler and the CLR&lt;/li&gt;
&lt;li&gt;Virtual method calls, which are the most common type of method call in C#, are made possible primarily by the CLR and the type object corresponding to the variable on which the method is being called.&lt;/li&gt;
&lt;li&gt;Nonvirtual method calls are handled in large part by the C# compiler, and require considerably less CLR magic behind the scenes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## But what about the boxing?!&lt;/p&gt;

&lt;p&gt;If you’re a regular reader of this blog, you’ll know that I love writing about how to avoid unnecessary boxing operations. I couldn’t leave this post without taking a final moment to look at how to avoid the type of boxing that we saw when we passed our Int32 to our GetString(object) method. The truth is that avoiding the boxing is incredibly simple. You simply need to provide a method overload for any value types that you reasonably expect to pass to the method. In fact, you’ll see this trick used fairly frequently in the .NET Framework. Console.WriteLine() is a good example. In the case of passing an Int32 to our GetString method, we would simply need to provide an overload such as this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we were to look at the IL for this method, we would see that ToString would be called on System.Int32 and not on System.Object. This assertion is made by the compiler, and is logically valid for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We cannot pass a less-derived type (i.e. an object) to GetString(int).&lt;/li&gt;
&lt;li&gt;We cannot pass a type derived from Int32 to this method, because value types do not support inheritance. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As the only type of parameter that can be passed to this method is an Int32, the compiler can therefore instruct the CLR to call Int32’s implementation of ToString() with no ill effects.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/c-how-method-calling-works&quot;&gt;[C#] How method calling works&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on December 15, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Posting JavaScript objects with Ajax and ASP.NET MVC]]></title>
  <link>http://localhost:4000/asp.net/posting-javascript-objects-with-ajax-and-asp-net-mvc</link>
  <id>http://localhost:4000/asp.net/posting-javascript-objects-with-ajax-and-asp-net-mvc</id>
  <published>2013-11-24T00:00:00+00:00</published>
  <updated>2013-11-24T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;As websites become more and more interactive the need frequently arises to send data back and forth between web clients and servers using Ajax. ASP.NET combined with jQuery makes this process simple to implement for web developers.&lt;/p&gt;

&lt;p&gt;For this example, we’re going to POST the following JavaScript object to our server, and return a Boolean value indicating if the data was correctly received.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tommy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Tommy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1921&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;hobbies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Pinball&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Holiday camp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-server-side&quot;&gt;The server side&lt;/h2&gt;

&lt;p&gt;The first thing we need to do on the server side is define a data structure corresponding to the JavaScript object we wish to send.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hobbies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how the casing of the variable names in the JavaScript and C# objects doesn’t have to match. We can declare our JavaScript object properties in camel case and our C# properties in Pascal case and the model binder will work just fine.&lt;/p&gt;

&lt;p&gt;Now let’s write our method. All we need to do is create a standard ASP.NET MVC controller method which takes a single parameter of the Person type, like so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As mentioned, I’m returning a Boolean value indicating whether the person object was successfully received.&lt;/p&gt;

&lt;p&gt;That’s all we need to do on the server side. Let’s writ the client-side code.&lt;/p&gt;

&lt;h2 id=&quot;the-client-side&quot;&gt;The client side&lt;/h2&gt;

&lt;p&gt;The first thing we’ll do is use jQuery to write the Ajax call.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@Url.Action(&amp;quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ProcessData&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tommy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;It worked!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;It didn&amp;#39;t work.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we’re invoking the ubiquitous “ajax” method, passing it an object containing all the information it needs to get the job done in the form of field values. Let’s take a brief look at each one.&lt;/p&gt;

&lt;h3 id=&quot;url&quot;&gt;url&lt;/h3&gt;

&lt;p&gt;The url field contains the dynamically-calculated address of our target method.&lt;/p&gt;

&lt;h3 id=&quot;type&quot;&gt;type&lt;/h3&gt;

&lt;p&gt;The type field indicates the type of HTTP request we wish to send. In this case it is a POST request.&lt;/p&gt;

&lt;h3 id=&quot;contenttype&quot;&gt;contentType&lt;/h3&gt;

&lt;p&gt;Here we are specifying that the data is of the JSON format. This is important as it provides the server with the knowledge it needs to be able to deserialise our data into a POCO object.&lt;/p&gt;

&lt;h3 id=&quot;data&quot;&gt;data&lt;/h3&gt;

&lt;p&gt;The data field contains the actual data that we want to send in the POST request. There are two things of note here. The first is that we have assigned our “tommy” object to a field named “person” in a new anonymous object. Why is this? Well, the JSON object that we send to the server needs to correspond to the signature of the method that will receive the request. As our method looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to send it an object that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second thing to note is that we invoke the JSON.stringify method in order to serialise the whole thing into a JSON string. This JSON string is what the server will receive and attempt to deserialise when we make the Ajax call from a web browser. We need to do this because “person” is a complex object and not a primitive JavaScript value, such as a string. Were we to send an object to the server consisting entirely of primitive values, this stringify call would not be necessary.&lt;/p&gt;

&lt;h3 id=&quot;success&quot;&gt;success&lt;/h3&gt;

&lt;p&gt;This function executes if the request succeeds. While in this case I’ve used an anonymous function, I could also have externalised this method and set “success” to a function pointer instead.&lt;/p&gt;

&lt;p&gt;This is all the server side code we need. Let’s fire up our website and run the code to see what happens.&lt;/p&gt;

&lt;h2 id=&quot;making-the-call&quot;&gt;Making the call&lt;/h2&gt;

&lt;p&gt;If we insert a breakpoint in our ProcessData method and execute our JavaScript, this the result we get in Visual Studio.&lt;/p&gt;

&lt;p&gt;[](http://www.levibotelho.com/wp-content/uploads/2013/11/ajax0.png)&lt;/p&gt;

&lt;p&gt;As you can see, the model binder has done a wonderful job. Not only has it instantiated our object and mapped the simple Name property, but it has also translated the JavaScript Date value into a valid C# DateTime object, and mapped out our string array perfectly. We can now go ahead and do what we like with the data.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/asp.net/posting-javascript-objects-with-ajax-and-asp-net-mvc&quot;&gt;Posting JavaScript objects with Ajax and ASP.NET MVC&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on November 24, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[call and callvirt in CIL]]></title>
  <link>http://localhost:4000/c%23/call-and-callvirt-in-cil</link>
  <id>http://localhost:4000/c%23/call-and-callvirt-in-cil</id>
  <published>2013-11-18T00:00:00+00:00</published>
  <updated>2013-11-18T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;If you’ve ever looked at even small amounts of CIL, you’ll notice that two different instructions are used to call methods: “call” and “callvirt”. My goal in this post is to introduce these two methods and provide a general understanding of how they are used.&lt;/p&gt;

&lt;h2 id=&quot;call--the-basics&quot;&gt;call – The basics&lt;/h2&gt;

&lt;p&gt;Call provides basic method calling functionality in CIL. Let’s jump right into an example to see how it works.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Printer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Printer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;.method private hidebysig static void  Main(string[] args) cil managed
{
  .entrypoint
  // Code size       11 (0xb)
  .maxstack  8
  IL_0000:  ldstr      &amp;quot;Hello World&amp;quot;
  IL_0005:  call       void ConsoleApplication1.Printer::Print(string)
  IL_000a:  ret
} // end of method Program::Main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;.method public hidebysig static void  Print(string message) cil managed
{
  // Code size       7 (0x7)
  .maxstack  8
  IL_0000:  ldarg.0
  IL_0001:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_0006:  ret
} // end of method Printer::Print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There isn’t actually anything too complicated going on here. When we execute Main, “Hello World” is loaded onto the stack, and then the Print method, which takes a single string parameter, is called using the “call” instruction. Notice that the call instruction itself takes as a descriptor a reference to the method to call. (This reference is actually a metadata token, but going into details about metadata is a topic for another day.) When call executes, it pops the number of arguments of the stack that the method being called requires, and passes them as zero-indexed arguments to the method. We can see this in action at line IL_0000 of the Print method, where we load “argument 0” onto the stack so that it can be passed to the Console.WriteLine method by another “call” invocation. In our case the Print method doesn’t return anything, but if it did the return value would simply be pushed onto the stack before the final “ret” call of the method.&lt;/p&gt;

&lt;h2 id=&quot;callvirt--the-basics&quot;&gt;callvirt – The basics&lt;/h2&gt;

&lt;p&gt;Perhaps the easiest way to distinguish call from callvirt is to refer to their different descriptions in the CIL spec. While call is simply used to “call a method”, “callvirt” is used to “call a method associated, at runtime, with an object”. To understand how the notion of an object impacts a method call, take this function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.levibotelho.com/polymorphism-with-new-and-override/&quot;&gt;As we learned back in this post&lt;/a&gt;, the behaviour that this method will exhibit is entirely dependent on what type “thingy” really is, due to the fact that ToString() is a virtual method. But how can the runtime know what implementation of “ToString” to call if it calls it on a simple object? Well, this is where callvirt really starts to make sense. Callvirt takes into account the type of the object on which the method is being called in order to provide us with the polymorphic behaviour that we expect from such cases. All that is required in order to execute a callvirt instruction is to pass a pointer to the object on which the method is being called. We can see this if we look at the IL of the ToString() call in the Print method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;.method private hidebysig instance void  Print(object thingy) cil managed
{
  // Code size       12 (0xc)
  .maxstack  8
  IL_0000:  ldarg.1
  IL_0001:  callvirt   instance string [mscorlib]System.Object::ToString()
  IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)
  IL_000b:  ret
} // end of method Printer::Print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The override of ToString() that we are calling doesn’t take any parameters, however before calling it, argument at index 0 is loaded onto the stack. Argument at index 0 is of course “thingy”, whatever it happens to be. When callvirt is executed to call the ToString() method, it first verifies that “thingy” isn’t null, and then goes on to determine the type of “thingy” before locating the correct instance of ToString() to call by walking up the inheritance tree until it finds a valid ToString() implementation.&lt;/p&gt;

&lt;h2 id=&quot;when-callvirt-replaces-call&quot;&gt;When callvirt replaces call…&lt;/h2&gt;

&lt;p&gt;So far the distinction that we have made between call and callvirt has been simple: call provides simple method calling functionality, while callvirt provides support for virtual methods and polymorphism. However, if you begin to examine the IL of your own C# programs you’ll notice that callvirt is also used to call nonvirtual instance methods. But why would the C# compiler do this? Off the top of my head I can think of two advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nonvirtual methods can be made virtual without recompiling calling assemblies.&lt;/li&gt;
&lt;li&gt;Developers don’t need to keep track of which methods are virtual and can therefore be called on null references (because of callvirt’s integrated null check). This “feature” is limiting, but simplifies coding.
It is also important to understand that calling nonvirtual methods with callvirt doesn’t impact performance as much as one may think. While the null reference check integrated into callvirt is still performed on nonvirtual calls, if the jitter knows that a given method is nonvirtual it won’t bother searching through the inheritance tree to find the correct method implementation. It’ll go straight to the correct implementation just as call would. This makes callvirt almost as fast as call when calling nonvirtual instance methods.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;## When call replaces callvirt…&lt;/p&gt;

&lt;p&gt;Despite the fact that it doesn’t have “virt” in the name, call can still be used to call nonvirtual methods. It simply calls them nonvirtually, invoking the method declared on the type of the variable instance as it appears in the calling scope. An example of when this occurs is when an overriding method calls a base implementation. Were the call to be made with callvirt, the runtime would end up re-calling the derived implementation which would then re-call the base implementation and so on and so forth until a stack overflow occurred.&lt;/p&gt;

&lt;h2 id=&quot;final-word&quot;&gt;Final word&lt;/h2&gt;

&lt;p&gt;Hopefully by now you’ll have a decent understanding of the call and callvirt instructions. This understanding will be important in several upcoming articles, so stay tuned to make use of what we’ve discussed.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/call-and-callvirt-in-cil&quot;&gt;call and callvirt in CIL&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on November 18, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Create a WordPress blog on Windows Azure in five minutes]]></title>
  <link>http://localhost:4000/windows%20azure/create-a-wordpress-blog-on-windows-azure-in-five-minutes</link>
  <id>http://localhost:4000/windows%20azure/create-a-wordpress-blog-on-windows-azure-in-five-minutes</id>
  <published>2013-11-07T00:00:00+00:00</published>
  <updated>2013-11-07T00:00:00+00:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;First off, this isn’t one of those fake “five minute” tutorials that take half an hour to go through. This really is easy. The only thing you’ll need for this tutorial is a Windows Azure account. If you don’t have one you can sign up for a one on &lt;a href=&quot;http://www.windowsazure.com&quot;&gt;www.windowsazure.com&lt;/a&gt; for free. Now then, let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;step-1-log-into-your-account&quot;&gt;Step 1: Log into your account&lt;/h2&gt;

&lt;p&gt;Head over to &lt;a href=&quot;http://manage.windowsazure.com&quot;&gt;manage.windowsazure.com&lt;/a&gt; and log in.&lt;/p&gt;

&lt;h2 id=&quot;step-2-go-to-the-web-sites-menu-and-create-a-new-site&quot;&gt;Step 2: Go to the Web Sites menu and create a new site&lt;/h2&gt;

&lt;p&gt;The button to access the web sites menu is at the top left of the page…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.levibotelho.com/wp-content/uploads/2013/11/azureblog0.png&quot; alt=&quot;azureblog0&quot; width=&quot;264&quot; height=&quot;220&quot; class=&quot;aligncenter size-full wp-image-2632&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…and the button to create a new one is found at the bottom left.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.levibotelho.com/wp-content/uploads/2013/11/azureblog1.png&quot; alt=&quot;azureblog1&quot; width=&quot;206&quot; height=&quot;94&quot; class=&quot;aligncenter size-full wp-image-2642&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3-create-a-new-website-from-the-gallery&quot;&gt;Step 3: Create a new website from the “Gallery”&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://www.levibotelho.com/wp-content/uploads/2013/11/azureblog2.png&quot; alt=&quot;azureblog2&quot; width=&quot;624&quot; height=&quot;257&quot; class=&quot;aligncenter size-full wp-image-2652&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-select-the-wordpress-app&quot;&gt;Step 4: Select the WordPress App&lt;/h2&gt;

&lt;p&gt;Select “Blogs” from the category list at the left-hand side of the window and pick “WordPress” from the list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.levibotelho.com/wp-content/uploads/2013/11/azureblog3.png&quot; alt=&quot;azureblog3&quot; width=&quot;624&quot; height=&quot;414&quot; class=&quot;aligncenter size-full wp-image-2662&quot; /&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more-2622&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-5-configure-the-site&quot;&gt;Step 5: Configure the site&lt;/h2&gt;

&lt;p&gt;Start by picking a URL. Your blog will officially be hosted at &lt;em&gt;yoururl.azurewebsites.net&lt;/em&gt;, but you can choose to have this redirect to the domain name of your choice (more on that later). You’ll also need to specify that you want to create a new MySQL database for your blog. Finally, you’ll need to specify in what part of the world you’d like your blog to be hosted, and the Windows Azure account to associate with it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.levibotelho.com/wp-content/uploads/2013/11/azureblog4.png&quot; alt=&quot;azureblog4&quot; width=&quot;624&quot; height=&quot;418&quot; class=&quot;aligncenter size-full wp-image-2672&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-6-accept-the-database-tos&quot;&gt;Step 6: Accept the database TOS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://www.levibotelho.com/wp-content/uploads/2013/11/azureblog5.png&quot; alt=&quot;azureblog5&quot; width=&quot;624&quot; height=&quot;408&quot; class=&quot;aligncenter size-full wp-image-2682&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-7-get-writing&quot;&gt;Step 7: Get writing!&lt;/h2&gt;

&lt;p&gt;Seriously, that’s all there is to it! If you now look at the Web Sites page of the management portal you’ll see your new blog listed like so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.levibotelho.com/wp-content/uploads/2013/11/azureblog6.png&quot; alt=&quot;azureblog6&quot; width=&quot;624&quot; height=&quot;31&quot; class=&quot;aligncenter size-full wp-image-2692&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking the provided address will take you to your blog where you’ll be met with a welcome page from WordPress which will allow you to create a blog admin account. You can then log in and write your first post!&lt;/p&gt;

&lt;h2 id=&quot;custom-domain-names&quot;&gt;Custom domain names&lt;/h2&gt;

&lt;p&gt;If you’re serious about starting a blog, the one thing that you’ll be missing right now is a custom domain name. Sure, &lt;em&gt;myveryspecialblog.azurewebsites.net&lt;/em&gt; is great to get started, but it’s not terribly aesthetic. I won’t go on explaining the whole process of configuring a custom domain &lt;a href=&quot;http://www.windowsazure.com/en-us/develop/net/common-tasks/custom-dns-web-site/&quot;&gt;because Microsoft has already done so here&lt;/a&gt;, but the one thing I will mention is that in order to map your azurewebsites domain to your personal domain name you’ll need to change the “compute mode” of your blog from “Free” to “Shared”. Note that this change does come at a small, but very manageable cost. As an example, at the time of writing this blog which is hosted as a shared Azure Web Site costs a little less than €1.00 per hundred visitors to run.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/windows%20azure/create-a-wordpress-blog-on-windows-azure-in-five-minutes&quot;&gt;Create a WordPress blog on Windows Azure in five minutes&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on November 07, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[What is the difference between if and switch?]]></title>
  <link>http://localhost:4000/c%23/what-is-the-difference-between-if-and-switch</link>
  <id>http://localhost:4000/c%23/what-is-the-difference-between-if-and-switch</id>
  <published>2013-10-16T00:00:00+01:00</published>
  <updated>2013-10-16T00:00:00+01:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>your@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Although switch and if may seem to be two nearly-equivalent representations of the same concept, under the hood they function in two very different ways. Understanding the differences between the two makes for good general knowledge and provides one with an interesting glimpse at how the C# compiler works to optimise your code without you even knowing it.&lt;/p&gt;

&lt;h2 id=&quot;ifelse-statements&quot;&gt;If/else statements&lt;/h2&gt;

&lt;p&gt;If/else statements at the IL level work pretty much as one would expect them to. The runtime evaluates each expression in a series until it finds one which is true, at which it jumps to and executes the code corresponding to the case. To illustrate, let’s look at the IL for the following code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;IL_000E:  ldloc.0     // Load our “val” value onto the stack
IL_000F:  ldc.i4.1    // Load the numeric value 1 onto the stack
IL_0010:  bne.un.s    IL_001D    // Go to line IL_001D if the two
                                 // values on the stack are NOT equal,
                                 // otherwise execute the following...
IL_0012:  ldstr       &amp;quot;One&amp;quot;
IL_0017:  call        System.Console.WriteLine
IL_001C:  ret
// The remaining code simply repeats the above pattern...
IL_001D:  ldloc.0     // val
IL_001E:  ldc.i4.2
IL_001F:  bne.un.s    IL_002C
IL_0021:  ldstr       &amp;quot;Two&amp;quot;
IL_0026:  call        System.Console.WriteLine
IL_002B:  ret
IL_002C:  ldloc.0     // val
IL_002D:  ldc.i4.3
IL_002E:  bne.un.s    IL_003A
IL_0030:  ldstr       &amp;quot;Three&amp;quot;
IL_0035:  call        System.Console.WriteLine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nothing much to say about this really, this is pretty simple stuff. That said, it’s important to see how if statements function so that we have something to compare switch to. Let’s go ahead and take a look at how a switch statement accomplishes the same task.&lt;/p&gt;

&lt;h2 id=&quot;switch-statements&quot;&gt;Switch statements&lt;/h2&gt;

&lt;p&gt;Let’s dive right in by rewriting the above example as a switch statement and examining the corresponding IL.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Three&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;IL_0002:  ldloc.0     // Load our “val” value onto the stack
IL_0003:  stloc.1     // CS$0$0000
IL_0004:  ldloc.1     // CS$0$0000
IL_0005:  ldc.i4.1
IL_0006:  sub
IL_0007:  switch      (IL_0019, IL_0024, IL_002F)
IL_0018:  ret
IL_0019:  ldstr       &amp;quot;One&amp;quot;
IL_001E:  call        System.Console.WriteLine
IL_0023:  ret
IL_0024:  ldstr       &amp;quot;Two&amp;quot;
IL_0029:  call        System.Console.WriteLine
IL_002E:  ret
IL_002F:  ldstr       &amp;quot;Three&amp;quot;
IL_0034:  call        System.Console.WriteLine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two really noticeable differences here in comparison to the switch. First, there is the presence of the “switch” right there in the middle of the code. And second, there are no equality, inequality, greater than or less than comparisons to be seen. So if switch doesn’t work by comparing sets of values, how does it correctly manage to route program flow?&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more-2532&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Switch does this by implementing what is known as a branch table. You can think of a branch table as an array of locations in the program to which to navigate. These locations, known formally as “targets”, are what we see in parentheses beside the switch statement in the above IL. Switch selects the target to direct the program flow to by using a zero-based index which it simply pops off the stack. The genius of switch, however, is that the index is mathematically calculated from the value passed to the switch statement in C#, and not derived by evaluating a series of “if equals” statements. This allows switch to be consistently fast no matter how many cases it may contain. Where if may need to evaluate every single case in a long list in order to find the case that turns out to be true, switch simply calculates the branch table index and forges on. What is really neat about all this is that the calculation to determine the branch table index is visible directly in the IL of C# program. Let’s take another look at the above IL and see how it’s done in this case.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;IL_0002:  ldloc.0     // Load our “val” value onto the stack
IL_0003:  stloc.1     // Pop “val” off the stack and store it
		      // in local variable 1.
IL_0004:  ldloc.1     // Put “val” back on the stack.
IL_0005:  ldc.i4.1    // Load the integer value 1 onto the stack.
IL_0006:  sub         // Subtract 1 from val and push the result
                      // onto the stack.

// Switch on the result.
IL_0007:  switch      (IL_0019, IL_0024, IL_002F)
IL_0018:  ret
IL_0019:  ldstr       &amp;quot;One&amp;quot;
IL_001E:  call        System.Console.WriteLine
IL_0023:  ret
IL_0024:  ldstr       &amp;quot;Two&amp;quot;
IL_0029:  call        System.Console.WriteLine
IL_002E:  ret
IL_002F:  ldstr       &amp;quot;Three&amp;quot;
IL_0034:  call        System.Console.WriteLine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, calculating the branch table index in this case is extremely simple. We simply subtract 1 from the value passed to the switch statement. 1 redirects to branch table index 0 which points to line IL_0019, 2 redirects to branch table index 1 which points to line IL_0024 and 3 redirects to branch table index 2 which points to line IL_002F. If by chance the branch table index falls outside the range of the branch table, program flow continues as normal and no redirection takes place.&lt;/p&gt;

&lt;h2 id=&quot;slightly-more-complex-cases&quot;&gt;Slightly more complex cases&lt;/h2&gt;

&lt;p&gt;What we’ve looked at here is how a textbook switch/case statement is compiled and executed. I deliberately chose an example using values 1, 2 and 3 because the calculation to obtain the branch table index was simple and no extra compiler optimisations were included in the code. (If you want to see what I mean, look at the IL for a switch on 0, 1 and 2.) But as you would expect, the C# compiler is very smart indeed, and is able to handle scenarios that are more complex than this one. Take for example a set of non-contiguous values that aren’t too far apart from one-another. The compiler responds by adding additional cases to fill in the blanks, as we can see here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Five&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;IL_0002:  ldloc.0     // val
IL_0003:  stloc.1     // CS$0$0000
IL_0004:  ldloc.1     // CS$0$0000
IL_0005:  ldc.i4.1
IL_0006:  sub
IL_0007:  switch      (IL_0021, IL_002C, IL_0041, IL_0041, IL_0037)
IL_0020:  ret
IL_0021:  ldstr       &amp;quot;One&amp;quot;
IL_0026:  call        System.Console.WriteLine
IL_002B:  ret
IL_002C:  ldstr       &amp;quot;Two&amp;quot;
IL_0031:  call        System.Console.WriteLine
IL_0036:  ret
IL_0037:  ldstr       &amp;quot;Five&amp;quot;
IL_003C:  call        System.Console.WriteLine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how cases 3 and 4 simply redirect to the end of the program?&lt;/p&gt;

&lt;p&gt;If the cases are too spread-apart then the compiler can choose a hybrid switch/if solution like so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Two&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Five hundred.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;IL_0002:  ldloc.0     // val
IL_0003:  stloc.1     // CS$0$0000
IL_0004:  ldloc.1     // CS$0$0000
IL_0005:  ldc.i4.1
IL_0006:  sub
IL_0007:  switch      (IL_001D, IL_0028)
IL_0014:  ldloc.1     // CS$0$0000
IL_0015:  ldc.i4      F4 01 00 00 // (500)
IL_001A:  beq.s       IL_0033
IL_001C:  ret
IL_001D:  ldstr       &amp;quot;One&amp;quot;
IL_0022:  call        System.Console.WriteLine
IL_0027:  ret
IL_0028:  ldstr       &amp;quot;Two&amp;quot;
IL_002D:  call        System.Console.WriteLine
IL_0032:  ret
IL_0033:  ldstr       &amp;quot;Five hundred.&amp;quot;
IL_0038:  call        System.Console.WriteLine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the switch is performed on values 1 and 2. If neither of those cases are true, then it performs a test of equality to see if the value equals 500.&lt;/p&gt;

&lt;p&gt;And finally, if the cases are wildly different from one another, the compiler can eschew the switch altogether and go for something functionally-similar to an if/else scenario as follows.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;One&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Twenty-nine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Five hundred.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;IL_0002:  ldloc.0     // val
IL_0003:  stloc.1     // CS$0$0000
IL_0004:  ldloc.1     // CS$0$0000
IL_0005:  ldc.i4.1
IL_0006:  beq.s       IL_0016
IL_0008:  ldloc.1     // CS$0$0000
IL_0009:  ldc.i4.s    1D
IL_000B:  beq.s       IL_0021
IL_000D:  ldloc.1     // CS$0$0000
IL_000E:  ldc.i4      F4 01 00 00
IL_0013:  beq.s       IL_002C
IL_0015:  ret
IL_0016:  ldstr       &amp;quot;One&amp;quot;
IL_001B:  call        System.Console.WriteLine
IL_0020:  ret
IL_0021:  ldstr       &amp;quot;Twenty-nine&amp;quot;
IL_0026:  call        System.Console.WriteLine
IL_002B:  ret
IL_002C:  ldstr       &amp;quot;Five hundred.&amp;quot;
IL_0031:  call        System.Console.WriteLine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you should see by now, the C# compiler exhibits a high level of intelligence and flexibility in determining how to treat each individual scenario. I had a lot of fun playing with all sorts of different cases and seeing how the compiler would react while writing this article and would encourage anyone interested to do the same. &lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/c%23/what-is-the-difference-between-if-and-switch&quot;&gt;What is the difference between if and switch?&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Site Title&lt;/a&gt; on October 16, 2013.&lt;/p&gt;</content>
</entry>

</feed>
